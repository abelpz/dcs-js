/* tslint:disable */
/* eslint-disable */
/**
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * The version of the OpenAPI document: 1.17.3+dcs
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateHookOption } from '../models';
// @ts-ignore
import { CreateLabelOption } from '../models';
// @ts-ignore
import { CreateOrgOption } from '../models';
// @ts-ignore
import { CreateRepoOption } from '../models';
// @ts-ignore
import { CreateTeamOption } from '../models';
// @ts-ignore
import { EditHookOption } from '../models';
// @ts-ignore
import { EditLabelOption } from '../models';
// @ts-ignore
import { EditOrgOption } from '../models';
// @ts-ignore
import { EditTeamOption } from '../models';
// @ts-ignore
import { Hook } from '../models';
// @ts-ignore
import { Label } from '../models';
// @ts-ignore
import { Organization } from '../models';
// @ts-ignore
import { OrganizationPermissions } from '../models';
// @ts-ignore
import { Repository } from '../models';
// @ts-ignore
import { Team } from '../models';
// @ts-ignore
import { TeamSearch200Response } from '../models';
// @ts-ignore
import { User } from '../models';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a repository in an organization
         * @param {string} org name of organization
         * @param {CreateRepoOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrgRepo: async (org: string, body?: CreateRepoOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('createOrgRepo', 'org', org)
            const localVarPath = `/orgs/{org}/repos`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a repository in an organization
         * @param {string} org name of organization
         * @param {CreateRepoOption} [body] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOrgRepoDeprecated: async (org: string, body?: CreateRepoOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('createOrgRepoDeprecated', 'org', org)
            const localVarPath = `/org/{org}/repos`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a team member
         * @param {number} id id of the team
         * @param {string} username username of the user to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAddTeamMember: async (id: number, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgAddTeamMember', 'id', id)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgAddTeamMember', 'username', username)
            const localVarPath = `/teams/{id}/members/{username}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a repository to a team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to add
         * @param {string} repo name of the repo to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAddTeamRepository: async (id: number, org: string, repo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgAddTeamRepository', 'id', id)
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgAddTeamRepository', 'org', org)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('orgAddTeamRepository', 'repo', repo)
            const localVarPath = `/teams/{id}/repos/{org}/{repo}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Conceal a user\'s membership
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgConcealMember: async (org: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgConcealMember', 'org', org)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgConcealMember', 'username', username)
            const localVarPath = `/orgs/{org}/public_members/{username}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an organization
         * @param {CreateOrgOption} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreate: async (organization: CreateOrgOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('orgCreate', 'organization', organization)
            const localVarPath = `/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a hook
         * @param {string} org name of the organization
         * @param {CreateHookOption} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateHook: async (org: string, body: CreateHookOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgCreateHook', 'org', org)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('orgCreateHook', 'body', body)
            const localVarPath = `/orgs/{org}/hooks/`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a label for an organization
         * @param {string} org name of the organization
         * @param {CreateLabelOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateLabel: async (org: string, body?: CreateLabelOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgCreateLabel', 'org', org)
            const localVarPath = `/orgs/{org}/labels`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a team
         * @param {string} org name of the organization
         * @param {CreateTeamOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateTeam: async (org: string, body?: CreateTeamOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgCreateTeam', 'org', org)
            const localVarPath = `/orgs/{org}/teams`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an organization
         * @param {string} org organization that is to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDelete: async (org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgDelete', 'org', org)
            const localVarPath = `/orgs/{org}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteHook: async (org: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgDeleteHook', 'org', org)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgDeleteHook', 'id', id)
            const localVarPath = `/orgs/{org}/hooks/{id}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} org name of the organization
         * @param {number} id id of the label to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteLabel: async (org: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgDeleteLabel', 'org', org)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgDeleteLabel', 'id', id)
            const localVarPath = `/orgs/{org}/labels/{id}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a member from an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteMember: async (org: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgDeleteMember', 'org', org)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgDeleteMember', 'username', username)
            const localVarPath = `/orgs/{org}/members/{username}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a team
         * @param {number} id id of the team to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteTeam: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgDeleteTeam', 'id', id)
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an organization
         * @param {string} org name of the organization to edit
         * @param {EditOrgOption} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEdit: async (org: string, body: EditOrgOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgEdit', 'org', org)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('orgEdit', 'body', body)
            const localVarPath = `/orgs/{org}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to update
         * @param {EditHookOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEditHook: async (org: string, id: number, body?: EditHookOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgEditHook', 'org', org)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgEditHook', 'id', id)
            const localVarPath = `/orgs/{org}/hooks/{id}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a label
         * @param {string} org name of the organization
         * @param {number} id id of the label to edit
         * @param {EditLabelOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEditLabel: async (org: string, id: number, body?: EditLabelOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgEditLabel', 'org', org)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgEditLabel', 'id', id)
            const localVarPath = `/orgs/{org}/labels/{id}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a team
         * @param {number} id id of the team to edit
         * @param {EditTeamOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEditTeam: async (id: number, body?: EditTeamOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgEditTeam', 'id', id)
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an organization
         * @param {string} org name of the organization to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGet: async (org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgGet', 'org', org)
            const localVarPath = `/orgs/{org}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of organizations
         * @param {string} [lang] If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetAll: async (lang?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetHook: async (org: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgGetHook', 'org', org)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgGetHook', 'id', id)
            const localVarPath = `/orgs/{org}/hooks/{id}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single label
         * @param {string} org name of the organization
         * @param {number} id id of the label to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetLabel: async (org: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgGetLabel', 'org', org)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgGetLabel', 'id', id)
            const localVarPath = `/orgs/{org}/labels/{id}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a team
         * @param {number} id id of the team to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetTeam: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgGetTeam', 'id', id)
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user permissions in organization
         * @param {string} username username of user
         * @param {string} org name of the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetUserPermissions: async (username: string, org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgGetUserPermissions', 'username', username)
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgGetUserPermissions', 'org', org)
            const localVarPath = `/users/{username}/orgs/{org}/permissions`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if a user is a member of an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgIsMember: async (org: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgIsMember', 'org', org)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgIsMember', 'username', username)
            const localVarPath = `/orgs/{org}/members/{username}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if a user is a public member of an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgIsPublicMember: async (org: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgIsPublicMember', 'org', org)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgIsPublicMember', 'username', username)
            const localVarPath = `/orgs/{org}/public_members/{username}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List the current user\'s organizations
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListCurrentUserOrgs: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List an organization\'s webhooks
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListHooks: async (org: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgListHooks', 'org', org)
            const localVarPath = `/orgs/{org}/hooks`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List an organization\'s labels
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListLabels: async (org: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgListLabels', 'org', org)
            const localVarPath = `/orgs/{org}/labels`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List an organization\'s members
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListMembers: async (org: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgListMembers', 'org', org)
            const localVarPath = `/orgs/{org}/members`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List an organization\'s public members
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListPublicMembers: async (org: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgListPublicMembers', 'org', org)
            const localVarPath = `/orgs/{org}/public_members`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List an organization\'s repos
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListRepos: async (org: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgListRepos', 'org', org)
            const localVarPath = `/orgs/{org}/repos`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List a particular member of team
         * @param {number} id id of the team
         * @param {string} username username of the member to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamMember: async (id: number, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgListTeamMember', 'id', id)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgListTeamMember', 'username', username)
            const localVarPath = `/teams/{id}/members/{username}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List a team\'s members
         * @param {number} id id of the team
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamMembers: async (id: number, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgListTeamMembers', 'id', id)
            const localVarPath = `/teams/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List a particular repo of team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to list
         * @param {string} repo name of the repo to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamRepo: async (id: number, org: string, repo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgListTeamRepo', 'id', id)
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgListTeamRepo', 'org', org)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('orgListTeamRepo', 'repo', repo)
            const localVarPath = `/teams/{id}/repos/{org}/{repo}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List a team\'s repos
         * @param {number} id id of the team
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamRepos: async (id: number, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgListTeamRepos', 'id', id)
            const localVarPath = `/teams/{id}/repos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List an organization\'s teams
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeams: async (org: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgListTeams', 'org', org)
            const localVarPath = `/orgs/{org}/teams`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List a user\'s organizations
         * @param {string} username username of user
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListUserOrgs: async (username: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgListUserOrgs', 'username', username)
            const localVarPath = `/users/{username}/orgs`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Publicize a user\'s membership
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPublicizeMember: async (org: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgPublicizeMember', 'org', org)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgPublicizeMember', 'username', username)
            const localVarPath = `/orgs/{org}/public_members/{username}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a team member
         * @param {number} id id of the team
         * @param {string} username username of the user to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgRemoveTeamMember: async (id: number, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgRemoveTeamMember', 'id', id)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('orgRemoveTeamMember', 'username', username)
            const localVarPath = `/teams/{id}/members/{username}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This does not delete the repository, it only removes the repository from the team.
         * @summary Remove a repository from a team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to remove
         * @param {string} repo name of the repo to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgRemoveTeamRepository: async (id: number, org: string, repo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orgRemoveTeamRepository', 'id', id)
            // verify required parameter 'org' is not null or undefined
            assertParamExists('orgRemoveTeamRepository', 'org', org)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('orgRemoveTeamRepository', 'repo', repo)
            const localVarPath = `/teams/{id}/repos/{org}/{repo}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for teams within an organization
         * @param {string} org name of the organization
         * @param {string} [q] keywords to search
         * @param {boolean} [includeDesc] include search within team description (defaults to true)
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamSearch: async (org: string, q?: string, includeDesc?: boolean, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('teamSearch', 'org', org)
            const localVarPath = `/orgs/{org}/teams/search`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (includeDesc !== undefined) {
                localVarQueryParameter['include_desc'] = includeDesc;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a repository in an organization
         * @param {string} org name of organization
         * @param {CreateRepoOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrgRepo(org: string, body?: CreateRepoOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrgRepo(org, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a repository in an organization
         * @param {string} org name of organization
         * @param {CreateRepoOption} [body] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async createOrgRepoDeprecated(org: string, body?: CreateRepoOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrgRepoDeprecated(org, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a team member
         * @param {number} id id of the team
         * @param {string} username username of the user to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAddTeamMember(id: number, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAddTeamMember(id, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a repository to a team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to add
         * @param {string} repo name of the repo to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAddTeamRepository(id: number, org: string, repo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAddTeamRepository(id, org, repo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Conceal a user\'s membership
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgConcealMember(org: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgConcealMember(org, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create an organization
         * @param {CreateOrgOption} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgCreate(organization: CreateOrgOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgCreate(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a hook
         * @param {string} org name of the organization
         * @param {CreateHookOption} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgCreateHook(org: string, body: CreateHookOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgCreateHook(org, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a label for an organization
         * @param {string} org name of the organization
         * @param {CreateLabelOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgCreateLabel(org: string, body?: CreateLabelOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgCreateLabel(org, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a team
         * @param {string} org name of the organization
         * @param {CreateTeamOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgCreateTeam(org: string, body?: CreateTeamOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgCreateTeam(org, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an organization
         * @param {string} org organization that is to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgDelete(org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgDelete(org, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgDeleteHook(org: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgDeleteHook(org, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} org name of the organization
         * @param {number} id id of the label to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgDeleteLabel(org: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgDeleteLabel(org, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a member from an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgDeleteMember(org: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgDeleteMember(org, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a team
         * @param {number} id id of the team to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgDeleteTeam(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgDeleteTeam(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an organization
         * @param {string} org name of the organization to edit
         * @param {EditOrgOption} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgEdit(org: string, body: EditOrgOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgEdit(org, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to update
         * @param {EditHookOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgEditHook(org: string, id: number, body?: EditHookOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgEditHook(org, id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a label
         * @param {string} org name of the organization
         * @param {number} id id of the label to edit
         * @param {EditLabelOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgEditLabel(org: string, id: number, body?: EditLabelOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgEditLabel(org, id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit a team
         * @param {number} id id of the team to edit
         * @param {EditTeamOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgEditTeam(id: number, body?: EditTeamOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgEditTeam(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an organization
         * @param {string} org name of the organization to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGet(org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGet(org, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of organizations
         * @param {string} [lang] If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGetAll(lang?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGetAll(lang, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGetHook(org: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGetHook(org, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a single label
         * @param {string} org name of the organization
         * @param {number} id id of the label to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGetLabel(org: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGetLabel(org, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a team
         * @param {number} id id of the team to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGetTeam(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGetTeam(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user permissions in organization
         * @param {string} username username of user
         * @param {string} org name of the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGetUserPermissions(username: string, org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPermissions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGetUserPermissions(username, org, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check if a user is a member of an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgIsMember(org: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgIsMember(org, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check if a user is a public member of an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgIsPublicMember(org: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgIsPublicMember(org, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List the current user\'s organizations
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListCurrentUserOrgs(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListCurrentUserOrgs(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List an organization\'s webhooks
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListHooks(org: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hook>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListHooks(org, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List an organization\'s labels
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListLabels(org: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Label>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListLabels(org, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List an organization\'s members
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListMembers(org: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListMembers(org, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List an organization\'s public members
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListPublicMembers(org: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListPublicMembers(org, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List an organization\'s repos
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListRepos(org: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Repository>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListRepos(org, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List a particular member of team
         * @param {number} id id of the team
         * @param {string} username username of the member to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListTeamMember(id: number, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListTeamMember(id, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List a team\'s members
         * @param {number} id id of the team
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListTeamMembers(id: number, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListTeamMembers(id, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List a particular repo of team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to list
         * @param {string} repo name of the repo to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListTeamRepo(id: number, org: string, repo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListTeamRepo(id, org, repo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List a team\'s repos
         * @param {number} id id of the team
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListTeamRepos(id: number, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Repository>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListTeamRepos(id, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List an organization\'s teams
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListTeams(org: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListTeams(org, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List a user\'s organizations
         * @param {string} username username of user
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgListUserOrgs(username: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgListUserOrgs(username, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Publicize a user\'s membership
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPublicizeMember(org: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPublicizeMember(org, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a team member
         * @param {number} id id of the team
         * @param {string} username username of the user to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgRemoveTeamMember(id: number, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgRemoveTeamMember(id, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This does not delete the repository, it only removes the repository from the team.
         * @summary Remove a repository from a team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to remove
         * @param {string} repo name of the repo to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgRemoveTeamRepository(id: number, org: string, repo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgRemoveTeamRepository(id, org, repo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for teams within an organization
         * @param {string} org name of the organization
         * @param {string} [q] keywords to search
         * @param {boolean} [includeDesc] include search within team description (defaults to true)
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamSearch(org: string, q?: string, includeDesc?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamSearch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamSearch(org, q, includeDesc, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a repository in an organization
         * @param {string} org name of organization
         * @param {CreateRepoOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrgRepo(org: string, body?: CreateRepoOption, options?: any): AxiosPromise<Repository> {
            return localVarFp.createOrgRepo(org, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a repository in an organization
         * @param {string} org name of organization
         * @param {CreateRepoOption} [body] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOrgRepoDeprecated(org: string, body?: CreateRepoOption, options?: any): AxiosPromise<Repository> {
            return localVarFp.createOrgRepoDeprecated(org, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a team member
         * @param {number} id id of the team
         * @param {string} username username of the user to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAddTeamMember(id: number, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgAddTeamMember(id, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a repository to a team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to add
         * @param {string} repo name of the repo to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAddTeamRepository(id: number, org: string, repo: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgAddTeamRepository(id, org, repo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Conceal a user\'s membership
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgConcealMember(org: string, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgConcealMember(org, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an organization
         * @param {CreateOrgOption} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreate(organization: CreateOrgOption, options?: any): AxiosPromise<Organization> {
            return localVarFp.orgCreate(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a hook
         * @param {string} org name of the organization
         * @param {CreateHookOption} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateHook(org: string, body: CreateHookOption, options?: any): AxiosPromise<Hook> {
            return localVarFp.orgCreateHook(org, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a label for an organization
         * @param {string} org name of the organization
         * @param {CreateLabelOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateLabel(org: string, body?: CreateLabelOption, options?: any): AxiosPromise<Label> {
            return localVarFp.orgCreateLabel(org, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a team
         * @param {string} org name of the organization
         * @param {CreateTeamOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateTeam(org: string, body?: CreateTeamOption, options?: any): AxiosPromise<Team> {
            return localVarFp.orgCreateTeam(org, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an organization
         * @param {string} org organization that is to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDelete(org: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgDelete(org, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteHook(org: string, id: number, options?: any): AxiosPromise<void> {
            return localVarFp.orgDeleteHook(org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} org name of the organization
         * @param {number} id id of the label to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteLabel(org: string, id: number, options?: any): AxiosPromise<void> {
            return localVarFp.orgDeleteLabel(org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a member from an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteMember(org: string, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgDeleteMember(org, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a team
         * @param {number} id id of the team to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeleteTeam(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.orgDeleteTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an organization
         * @param {string} org name of the organization to edit
         * @param {EditOrgOption} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEdit(org: string, body: EditOrgOption, options?: any): AxiosPromise<Organization> {
            return localVarFp.orgEdit(org, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to update
         * @param {EditHookOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEditHook(org: string, id: number, body?: EditHookOption, options?: any): AxiosPromise<Hook> {
            return localVarFp.orgEditHook(org, id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a label
         * @param {string} org name of the organization
         * @param {number} id id of the label to edit
         * @param {EditLabelOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEditLabel(org: string, id: number, body?: EditLabelOption, options?: any): AxiosPromise<Label> {
            return localVarFp.orgEditLabel(org, id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit a team
         * @param {number} id id of the team to edit
         * @param {EditTeamOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgEditTeam(id: number, body?: EditTeamOption, options?: any): AxiosPromise<Team> {
            return localVarFp.orgEditTeam(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an organization
         * @param {string} org name of the organization to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGet(org: string, options?: any): AxiosPromise<Organization> {
            return localVarFp.orgGet(org, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of organizations
         * @param {string} [lang] If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetAll(lang?: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<Organization>> {
            return localVarFp.orgGetAll(lang, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a hook
         * @param {string} org name of the organization
         * @param {number} id id of the hook to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetHook(org: string, id: number, options?: any): AxiosPromise<Hook> {
            return localVarFp.orgGetHook(org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single label
         * @param {string} org name of the organization
         * @param {number} id id of the label to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetLabel(org: string, id: number, options?: any): AxiosPromise<Label> {
            return localVarFp.orgGetLabel(org, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a team
         * @param {number} id id of the team to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetTeam(id: number, options?: any): AxiosPromise<Team> {
            return localVarFp.orgGetTeam(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user permissions in organization
         * @param {string} username username of user
         * @param {string} org name of the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetUserPermissions(username: string, org: string, options?: any): AxiosPromise<OrganizationPermissions> {
            return localVarFp.orgGetUserPermissions(username, org, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if a user is a member of an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgIsMember(org: string, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgIsMember(org, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if a user is a public member of an organization
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgIsPublicMember(org: string, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgIsPublicMember(org, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List the current user\'s organizations
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListCurrentUserOrgs(page?: number, limit?: number, options?: any): AxiosPromise<Array<Organization>> {
            return localVarFp.orgListCurrentUserOrgs(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List an organization\'s webhooks
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListHooks(org: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<Hook>> {
            return localVarFp.orgListHooks(org, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List an organization\'s labels
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListLabels(org: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<Label>> {
            return localVarFp.orgListLabels(org, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List an organization\'s members
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListMembers(org: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.orgListMembers(org, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List an organization\'s public members
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListPublicMembers(org: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.orgListPublicMembers(org, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List an organization\'s repos
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListRepos(org: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<Repository>> {
            return localVarFp.orgListRepos(org, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List a particular member of team
         * @param {number} id id of the team
         * @param {string} username username of the member to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamMember(id: number, username: string, options?: any): AxiosPromise<User> {
            return localVarFp.orgListTeamMember(id, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List a team\'s members
         * @param {number} id id of the team
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamMembers(id: number, page?: number, limit?: number, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.orgListTeamMembers(id, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List a particular repo of team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to list
         * @param {string} repo name of the repo to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamRepo(id: number, org: string, repo: string, options?: any): AxiosPromise<Repository> {
            return localVarFp.orgListTeamRepo(id, org, repo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List a team\'s repos
         * @param {number} id id of the team
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeamRepos(id: number, page?: number, limit?: number, options?: any): AxiosPromise<Array<Repository>> {
            return localVarFp.orgListTeamRepos(id, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List an organization\'s teams
         * @param {string} org name of the organization
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListTeams(org: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<Team>> {
            return localVarFp.orgListTeams(org, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List a user\'s organizations
         * @param {string} username username of user
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgListUserOrgs(username: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<Organization>> {
            return localVarFp.orgListUserOrgs(username, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Publicize a user\'s membership
         * @param {string} org name of the organization
         * @param {string} username username of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPublicizeMember(org: string, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgPublicizeMember(org, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a team member
         * @param {number} id id of the team
         * @param {string} username username of the user to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgRemoveTeamMember(id: number, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgRemoveTeamMember(id, username, options).then((request) => request(axios, basePath));
        },
        /**
         * This does not delete the repository, it only removes the repository from the team.
         * @summary Remove a repository from a team
         * @param {number} id id of the team
         * @param {string} org organization that owns the repo to remove
         * @param {string} repo name of the repo to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgRemoveTeamRepository(id: number, org: string, repo: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgRemoveTeamRepository(id, org, repo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for teams within an organization
         * @param {string} org name of the organization
         * @param {string} [q] keywords to search
         * @param {boolean} [includeDesc] include search within team description (defaults to true)
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamSearch(org: string, q?: string, includeDesc?: boolean, page?: number, limit?: number, options?: any): AxiosPromise<TeamSearch200Response> {
            return localVarFp.teamSearch(org, q, includeDesc, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrgRepo operation in OrganizationApi.
 * @export
 * @interface OrganizationApiCreateOrgRepoRequest
 */
export interface OrganizationApiCreateOrgRepoRequest {
    /**
     * name of organization
     * @type {string}
     * @memberof OrganizationApiCreateOrgRepo
     */
    readonly org: string

    /**
     * 
     * @type {CreateRepoOption}
     * @memberof OrganizationApiCreateOrgRepo
     */
    readonly body?: CreateRepoOption
}

/**
 * Request parameters for createOrgRepoDeprecated operation in OrganizationApi.
 * @export
 * @interface OrganizationApiCreateOrgRepoDeprecatedRequest
 */
export interface OrganizationApiCreateOrgRepoDeprecatedRequest {
    /**
     * name of organization
     * @type {string}
     * @memberof OrganizationApiCreateOrgRepoDeprecated
     */
    readonly org: string

    /**
     * 
     * @type {CreateRepoOption}
     * @memberof OrganizationApiCreateOrgRepoDeprecated
     */
    readonly body?: CreateRepoOption
}

/**
 * Request parameters for orgAddTeamMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgAddTeamMemberRequest
 */
export interface OrganizationApiOrgAddTeamMemberRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgAddTeamMember
     */
    readonly id: number

    /**
     * username of the user to add
     * @type {string}
     * @memberof OrganizationApiOrgAddTeamMember
     */
    readonly username: string
}

/**
 * Request parameters for orgAddTeamRepository operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgAddTeamRepositoryRequest
 */
export interface OrganizationApiOrgAddTeamRepositoryRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgAddTeamRepository
     */
    readonly id: number

    /**
     * organization that owns the repo to add
     * @type {string}
     * @memberof OrganizationApiOrgAddTeamRepository
     */
    readonly org: string

    /**
     * name of the repo to add
     * @type {string}
     * @memberof OrganizationApiOrgAddTeamRepository
     */
    readonly repo: string
}

/**
 * Request parameters for orgConcealMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgConcealMemberRequest
 */
export interface OrganizationApiOrgConcealMemberRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgConcealMember
     */
    readonly org: string

    /**
     * username of the user
     * @type {string}
     * @memberof OrganizationApiOrgConcealMember
     */
    readonly username: string
}

/**
 * Request parameters for orgCreate operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgCreateRequest
 */
export interface OrganizationApiOrgCreateRequest {
    /**
     * 
     * @type {CreateOrgOption}
     * @memberof OrganizationApiOrgCreate
     */
    readonly organization: CreateOrgOption
}

/**
 * Request parameters for orgCreateHook operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgCreateHookRequest
 */
export interface OrganizationApiOrgCreateHookRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgCreateHook
     */
    readonly org: string

    /**
     * 
     * @type {CreateHookOption}
     * @memberof OrganizationApiOrgCreateHook
     */
    readonly body: CreateHookOption
}

/**
 * Request parameters for orgCreateLabel operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgCreateLabelRequest
 */
export interface OrganizationApiOrgCreateLabelRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgCreateLabel
     */
    readonly org: string

    /**
     * 
     * @type {CreateLabelOption}
     * @memberof OrganizationApiOrgCreateLabel
     */
    readonly body?: CreateLabelOption
}

/**
 * Request parameters for orgCreateTeam operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgCreateTeamRequest
 */
export interface OrganizationApiOrgCreateTeamRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgCreateTeam
     */
    readonly org: string

    /**
     * 
     * @type {CreateTeamOption}
     * @memberof OrganizationApiOrgCreateTeam
     */
    readonly body?: CreateTeamOption
}

/**
 * Request parameters for orgDelete operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgDeleteRequest
 */
export interface OrganizationApiOrgDeleteRequest {
    /**
     * organization that is to be deleted
     * @type {string}
     * @memberof OrganizationApiOrgDelete
     */
    readonly org: string
}

/**
 * Request parameters for orgDeleteHook operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgDeleteHookRequest
 */
export interface OrganizationApiOrgDeleteHookRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgDeleteHook
     */
    readonly org: string

    /**
     * id of the hook to delete
     * @type {number}
     * @memberof OrganizationApiOrgDeleteHook
     */
    readonly id: number
}

/**
 * Request parameters for orgDeleteLabel operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgDeleteLabelRequest
 */
export interface OrganizationApiOrgDeleteLabelRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgDeleteLabel
     */
    readonly org: string

    /**
     * id of the label to delete
     * @type {number}
     * @memberof OrganizationApiOrgDeleteLabel
     */
    readonly id: number
}

/**
 * Request parameters for orgDeleteMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgDeleteMemberRequest
 */
export interface OrganizationApiOrgDeleteMemberRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgDeleteMember
     */
    readonly org: string

    /**
     * username of the user
     * @type {string}
     * @memberof OrganizationApiOrgDeleteMember
     */
    readonly username: string
}

/**
 * Request parameters for orgDeleteTeam operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgDeleteTeamRequest
 */
export interface OrganizationApiOrgDeleteTeamRequest {
    /**
     * id of the team to delete
     * @type {number}
     * @memberof OrganizationApiOrgDeleteTeam
     */
    readonly id: number
}

/**
 * Request parameters for orgEdit operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgEditRequest
 */
export interface OrganizationApiOrgEditRequest {
    /**
     * name of the organization to edit
     * @type {string}
     * @memberof OrganizationApiOrgEdit
     */
    readonly org: string

    /**
     * 
     * @type {EditOrgOption}
     * @memberof OrganizationApiOrgEdit
     */
    readonly body: EditOrgOption
}

/**
 * Request parameters for orgEditHook operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgEditHookRequest
 */
export interface OrganizationApiOrgEditHookRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgEditHook
     */
    readonly org: string

    /**
     * id of the hook to update
     * @type {number}
     * @memberof OrganizationApiOrgEditHook
     */
    readonly id: number

    /**
     * 
     * @type {EditHookOption}
     * @memberof OrganizationApiOrgEditHook
     */
    readonly body?: EditHookOption
}

/**
 * Request parameters for orgEditLabel operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgEditLabelRequest
 */
export interface OrganizationApiOrgEditLabelRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgEditLabel
     */
    readonly org: string

    /**
     * id of the label to edit
     * @type {number}
     * @memberof OrganizationApiOrgEditLabel
     */
    readonly id: number

    /**
     * 
     * @type {EditLabelOption}
     * @memberof OrganizationApiOrgEditLabel
     */
    readonly body?: EditLabelOption
}

/**
 * Request parameters for orgEditTeam operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgEditTeamRequest
 */
export interface OrganizationApiOrgEditTeamRequest {
    /**
     * id of the team to edit
     * @type {number}
     * @memberof OrganizationApiOrgEditTeam
     */
    readonly id: number

    /**
     * 
     * @type {EditTeamOption}
     * @memberof OrganizationApiOrgEditTeam
     */
    readonly body?: EditTeamOption
}

/**
 * Request parameters for orgGet operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgGetRequest
 */
export interface OrganizationApiOrgGetRequest {
    /**
     * name of the organization to get
     * @type {string}
     * @memberof OrganizationApiOrgGet
     */
    readonly org: string
}

/**
 * Request parameters for orgGetAll operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgGetAllRequest
 */
export interface OrganizationApiOrgGetAllRequest {
    /**
     * If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
     * @type {string}
     * @memberof OrganizationApiOrgGetAll
     */
    readonly lang?: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgGetAll
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgGetAll
     */
    readonly limit?: number
}

/**
 * Request parameters for orgGetHook operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgGetHookRequest
 */
export interface OrganizationApiOrgGetHookRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgGetHook
     */
    readonly org: string

    /**
     * id of the hook to get
     * @type {number}
     * @memberof OrganizationApiOrgGetHook
     */
    readonly id: number
}

/**
 * Request parameters for orgGetLabel operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgGetLabelRequest
 */
export interface OrganizationApiOrgGetLabelRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgGetLabel
     */
    readonly org: string

    /**
     * id of the label to get
     * @type {number}
     * @memberof OrganizationApiOrgGetLabel
     */
    readonly id: number
}

/**
 * Request parameters for orgGetTeam operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgGetTeamRequest
 */
export interface OrganizationApiOrgGetTeamRequest {
    /**
     * id of the team to get
     * @type {number}
     * @memberof OrganizationApiOrgGetTeam
     */
    readonly id: number
}

/**
 * Request parameters for orgGetUserPermissions operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgGetUserPermissionsRequest
 */
export interface OrganizationApiOrgGetUserPermissionsRequest {
    /**
     * username of user
     * @type {string}
     * @memberof OrganizationApiOrgGetUserPermissions
     */
    readonly username: string

    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgGetUserPermissions
     */
    readonly org: string
}

/**
 * Request parameters for orgIsMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgIsMemberRequest
 */
export interface OrganizationApiOrgIsMemberRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgIsMember
     */
    readonly org: string

    /**
     * username of the user
     * @type {string}
     * @memberof OrganizationApiOrgIsMember
     */
    readonly username: string
}

/**
 * Request parameters for orgIsPublicMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgIsPublicMemberRequest
 */
export interface OrganizationApiOrgIsPublicMemberRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgIsPublicMember
     */
    readonly org: string

    /**
     * username of the user
     * @type {string}
     * @memberof OrganizationApiOrgIsPublicMember
     */
    readonly username: string
}

/**
 * Request parameters for orgListCurrentUserOrgs operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListCurrentUserOrgsRequest
 */
export interface OrganizationApiOrgListCurrentUserOrgsRequest {
    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListCurrentUserOrgs
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListCurrentUserOrgs
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListHooks operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListHooksRequest
 */
export interface OrganizationApiOrgListHooksRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgListHooks
     */
    readonly org: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListHooks
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListHooks
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListLabels operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListLabelsRequest
 */
export interface OrganizationApiOrgListLabelsRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgListLabels
     */
    readonly org: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListLabels
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListLabels
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListMembers operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListMembersRequest
 */
export interface OrganizationApiOrgListMembersRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgListMembers
     */
    readonly org: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListMembers
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListMembers
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListPublicMembers operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListPublicMembersRequest
 */
export interface OrganizationApiOrgListPublicMembersRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgListPublicMembers
     */
    readonly org: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListPublicMembers
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListPublicMembers
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListRepos operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListReposRequest
 */
export interface OrganizationApiOrgListReposRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgListRepos
     */
    readonly org: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListRepos
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListRepos
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListTeamMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListTeamMemberRequest
 */
export interface OrganizationApiOrgListTeamMemberRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgListTeamMember
     */
    readonly id: number

    /**
     * username of the member to list
     * @type {string}
     * @memberof OrganizationApiOrgListTeamMember
     */
    readonly username: string
}

/**
 * Request parameters for orgListTeamMembers operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListTeamMembersRequest
 */
export interface OrganizationApiOrgListTeamMembersRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgListTeamMembers
     */
    readonly id: number

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListTeamMembers
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListTeamMembers
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListTeamRepo operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListTeamRepoRequest
 */
export interface OrganizationApiOrgListTeamRepoRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgListTeamRepo
     */
    readonly id: number

    /**
     * organization that owns the repo to list
     * @type {string}
     * @memberof OrganizationApiOrgListTeamRepo
     */
    readonly org: string

    /**
     * name of the repo to list
     * @type {string}
     * @memberof OrganizationApiOrgListTeamRepo
     */
    readonly repo: string
}

/**
 * Request parameters for orgListTeamRepos operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListTeamReposRequest
 */
export interface OrganizationApiOrgListTeamReposRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgListTeamRepos
     */
    readonly id: number

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListTeamRepos
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListTeamRepos
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListTeams operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListTeamsRequest
 */
export interface OrganizationApiOrgListTeamsRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgListTeams
     */
    readonly org: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListTeams
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListTeams
     */
    readonly limit?: number
}

/**
 * Request parameters for orgListUserOrgs operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgListUserOrgsRequest
 */
export interface OrganizationApiOrgListUserOrgsRequest {
    /**
     * username of user
     * @type {string}
     * @memberof OrganizationApiOrgListUserOrgs
     */
    readonly username: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiOrgListUserOrgs
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiOrgListUserOrgs
     */
    readonly limit?: number
}

/**
 * Request parameters for orgPublicizeMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgPublicizeMemberRequest
 */
export interface OrganizationApiOrgPublicizeMemberRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiOrgPublicizeMember
     */
    readonly org: string

    /**
     * username of the user
     * @type {string}
     * @memberof OrganizationApiOrgPublicizeMember
     */
    readonly username: string
}

/**
 * Request parameters for orgRemoveTeamMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgRemoveTeamMemberRequest
 */
export interface OrganizationApiOrgRemoveTeamMemberRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgRemoveTeamMember
     */
    readonly id: number

    /**
     * username of the user to remove
     * @type {string}
     * @memberof OrganizationApiOrgRemoveTeamMember
     */
    readonly username: string
}

/**
 * Request parameters for orgRemoveTeamRepository operation in OrganizationApi.
 * @export
 * @interface OrganizationApiOrgRemoveTeamRepositoryRequest
 */
export interface OrganizationApiOrgRemoveTeamRepositoryRequest {
    /**
     * id of the team
     * @type {number}
     * @memberof OrganizationApiOrgRemoveTeamRepository
     */
    readonly id: number

    /**
     * organization that owns the repo to remove
     * @type {string}
     * @memberof OrganizationApiOrgRemoveTeamRepository
     */
    readonly org: string

    /**
     * name of the repo to remove
     * @type {string}
     * @memberof OrganizationApiOrgRemoveTeamRepository
     */
    readonly repo: string
}

/**
 * Request parameters for teamSearch operation in OrganizationApi.
 * @export
 * @interface OrganizationApiTeamSearchRequest
 */
export interface OrganizationApiTeamSearchRequest {
    /**
     * name of the organization
     * @type {string}
     * @memberof OrganizationApiTeamSearch
     */
    readonly org: string

    /**
     * keywords to search
     * @type {string}
     * @memberof OrganizationApiTeamSearch
     */
    readonly q?: string

    /**
     * include search within team description (defaults to true)
     * @type {boolean}
     * @memberof OrganizationApiTeamSearch
     */
    readonly includeDesc?: boolean

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof OrganizationApiTeamSearch
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof OrganizationApiTeamSearch
     */
    readonly limit?: number
}

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * 
     * @summary Create a repository in an organization
     * @param {OrganizationApiCreateOrgRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public createOrgRepo(requestParameters: OrganizationApiCreateOrgRepoRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).createOrgRepo(requestParameters.org, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a repository in an organization
     * @param {OrganizationApiCreateOrgRepoDeprecatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public createOrgRepoDeprecated(requestParameters: OrganizationApiCreateOrgRepoDeprecatedRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).createOrgRepoDeprecated(requestParameters.org, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a team member
     * @param {OrganizationApiOrgAddTeamMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgAddTeamMember(requestParameters: OrganizationApiOrgAddTeamMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgAddTeamMember(requestParameters.id, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a repository to a team
     * @param {OrganizationApiOrgAddTeamRepositoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgAddTeamRepository(requestParameters: OrganizationApiOrgAddTeamRepositoryRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgAddTeamRepository(requestParameters.id, requestParameters.org, requestParameters.repo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Conceal a user\'s membership
     * @param {OrganizationApiOrgConcealMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgConcealMember(requestParameters: OrganizationApiOrgConcealMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgConcealMember(requestParameters.org, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an organization
     * @param {OrganizationApiOrgCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgCreate(requestParameters: OrganizationApiOrgCreateRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgCreate(requestParameters.organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a hook
     * @param {OrganizationApiOrgCreateHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgCreateHook(requestParameters: OrganizationApiOrgCreateHookRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgCreateHook(requestParameters.org, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a label for an organization
     * @param {OrganizationApiOrgCreateLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgCreateLabel(requestParameters: OrganizationApiOrgCreateLabelRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgCreateLabel(requestParameters.org, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a team
     * @param {OrganizationApiOrgCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgCreateTeam(requestParameters: OrganizationApiOrgCreateTeamRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgCreateTeam(requestParameters.org, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an organization
     * @param {OrganizationApiOrgDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgDelete(requestParameters: OrganizationApiOrgDeleteRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgDelete(requestParameters.org, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a hook
     * @param {OrganizationApiOrgDeleteHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgDeleteHook(requestParameters: OrganizationApiOrgDeleteHookRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgDeleteHook(requestParameters.org, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a label
     * @param {OrganizationApiOrgDeleteLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgDeleteLabel(requestParameters: OrganizationApiOrgDeleteLabelRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgDeleteLabel(requestParameters.org, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a member from an organization
     * @param {OrganizationApiOrgDeleteMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgDeleteMember(requestParameters: OrganizationApiOrgDeleteMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgDeleteMember(requestParameters.org, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a team
     * @param {OrganizationApiOrgDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgDeleteTeam(requestParameters: OrganizationApiOrgDeleteTeamRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgDeleteTeam(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an organization
     * @param {OrganizationApiOrgEditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgEdit(requestParameters: OrganizationApiOrgEditRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgEdit(requestParameters.org, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a hook
     * @param {OrganizationApiOrgEditHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgEditHook(requestParameters: OrganizationApiOrgEditHookRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgEditHook(requestParameters.org, requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a label
     * @param {OrganizationApiOrgEditLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgEditLabel(requestParameters: OrganizationApiOrgEditLabelRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgEditLabel(requestParameters.org, requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit a team
     * @param {OrganizationApiOrgEditTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgEditTeam(requestParameters: OrganizationApiOrgEditTeamRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgEditTeam(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an organization
     * @param {OrganizationApiOrgGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgGet(requestParameters: OrganizationApiOrgGetRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgGet(requestParameters.org, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of organizations
     * @param {OrganizationApiOrgGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgGetAll(requestParameters: OrganizationApiOrgGetAllRequest = {}, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgGetAll(requestParameters.lang, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a hook
     * @param {OrganizationApiOrgGetHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgGetHook(requestParameters: OrganizationApiOrgGetHookRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgGetHook(requestParameters.org, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single label
     * @param {OrganizationApiOrgGetLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgGetLabel(requestParameters: OrganizationApiOrgGetLabelRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgGetLabel(requestParameters.org, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a team
     * @param {OrganizationApiOrgGetTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgGetTeam(requestParameters: OrganizationApiOrgGetTeamRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgGetTeam(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user permissions in organization
     * @param {OrganizationApiOrgGetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgGetUserPermissions(requestParameters: OrganizationApiOrgGetUserPermissionsRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgGetUserPermissions(requestParameters.username, requestParameters.org, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if a user is a member of an organization
     * @param {OrganizationApiOrgIsMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgIsMember(requestParameters: OrganizationApiOrgIsMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgIsMember(requestParameters.org, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if a user is a public member of an organization
     * @param {OrganizationApiOrgIsPublicMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgIsPublicMember(requestParameters: OrganizationApiOrgIsPublicMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgIsPublicMember(requestParameters.org, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List the current user\'s organizations
     * @param {OrganizationApiOrgListCurrentUserOrgsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListCurrentUserOrgs(requestParameters: OrganizationApiOrgListCurrentUserOrgsRequest = {}, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListCurrentUserOrgs(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List an organization\'s webhooks
     * @param {OrganizationApiOrgListHooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListHooks(requestParameters: OrganizationApiOrgListHooksRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListHooks(requestParameters.org, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List an organization\'s labels
     * @param {OrganizationApiOrgListLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListLabels(requestParameters: OrganizationApiOrgListLabelsRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListLabels(requestParameters.org, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List an organization\'s members
     * @param {OrganizationApiOrgListMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListMembers(requestParameters: OrganizationApiOrgListMembersRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListMembers(requestParameters.org, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List an organization\'s public members
     * @param {OrganizationApiOrgListPublicMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListPublicMembers(requestParameters: OrganizationApiOrgListPublicMembersRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListPublicMembers(requestParameters.org, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List an organization\'s repos
     * @param {OrganizationApiOrgListReposRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListRepos(requestParameters: OrganizationApiOrgListReposRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListRepos(requestParameters.org, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List a particular member of team
     * @param {OrganizationApiOrgListTeamMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListTeamMember(requestParameters: OrganizationApiOrgListTeamMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListTeamMember(requestParameters.id, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List a team\'s members
     * @param {OrganizationApiOrgListTeamMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListTeamMembers(requestParameters: OrganizationApiOrgListTeamMembersRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListTeamMembers(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List a particular repo of team
     * @param {OrganizationApiOrgListTeamRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListTeamRepo(requestParameters: OrganizationApiOrgListTeamRepoRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListTeamRepo(requestParameters.id, requestParameters.org, requestParameters.repo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List a team\'s repos
     * @param {OrganizationApiOrgListTeamReposRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListTeamRepos(requestParameters: OrganizationApiOrgListTeamReposRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListTeamRepos(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List an organization\'s teams
     * @param {OrganizationApiOrgListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListTeams(requestParameters: OrganizationApiOrgListTeamsRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListTeams(requestParameters.org, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List a user\'s organizations
     * @param {OrganizationApiOrgListUserOrgsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgListUserOrgs(requestParameters: OrganizationApiOrgListUserOrgsRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgListUserOrgs(requestParameters.username, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Publicize a user\'s membership
     * @param {OrganizationApiOrgPublicizeMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgPublicizeMember(requestParameters: OrganizationApiOrgPublicizeMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgPublicizeMember(requestParameters.org, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a team member
     * @param {OrganizationApiOrgRemoveTeamMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgRemoveTeamMember(requestParameters: OrganizationApiOrgRemoveTeamMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgRemoveTeamMember(requestParameters.id, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This does not delete the repository, it only removes the repository from the team.
     * @summary Remove a repository from a team
     * @param {OrganizationApiOrgRemoveTeamRepositoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public orgRemoveTeamRepository(requestParameters: OrganizationApiOrgRemoveTeamRepositoryRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).orgRemoveTeamRepository(requestParameters.id, requestParameters.org, requestParameters.repo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for teams within an organization
     * @param {OrganizationApiTeamSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public teamSearch(requestParameters: OrganizationApiTeamSearchRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).teamSearch(requestParameters.org, requestParameters.q, requestParameters.includeDesc, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
