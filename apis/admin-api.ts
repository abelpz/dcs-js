/* tslint:disable */
/* eslint-disable */
/**
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * The version of the OpenAPI document: 1.17.4+dcs
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateKeyOption } from '../models';
// @ts-ignore
import { CreateOrgOption } from '../models';
// @ts-ignore
import { CreateRepoOption } from '../models';
// @ts-ignore
import { CreateUserOption } from '../models';
// @ts-ignore
import { Cron } from '../models';
// @ts-ignore
import { EditUserOption } from '../models';
// @ts-ignore
import { Organization } from '../models';
// @ts-ignore
import { PublicKey } from '../models';
// @ts-ignore
import { Repository } from '../models';
// @ts-ignore
import { User } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adopt unadopted files as a repository
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAdoptRepository: async (owner: string, repo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('adminAdoptRepository', 'owner', owner)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('adminAdoptRepository', 'repo', repo)
            const localVarPath = `/admin/unadopted/{owner}/{repo}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an organization
         * @param {string} username username of the user that will own the created organization
         * @param {CreateOrgOption} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateOrg: async (username: string, organization: CreateOrgOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('adminCreateOrg', 'username', username)
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('adminCreateOrg', 'organization', organization)
            const localVarPath = `/admin/users/{username}/orgs`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a public key on behalf of a user
         * @param {string} username username of the user
         * @param {CreateKeyOption} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreatePublicKey: async (username: string, key?: CreateKeyOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('adminCreatePublicKey', 'username', username)
            const localVarPath = `/admin/users/{username}/keys`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(key, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a repository on behalf of a user
         * @param {string} username username of the user. This user will own the created repository
         * @param {CreateRepoOption} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateRepo: async (username: string, repository: CreateRepoOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('adminCreateRepo', 'username', username)
            // verify required parameter 'repository' is not null or undefined
            assertParamExists('adminCreateRepo', 'repository', repository)
            const localVarPath = `/admin/users/{username}/repos`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(repository, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {CreateUserOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateUser: async (body?: CreateUserOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List cron tasks
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCronList: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cron`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Run cron task
         * @param {string} task task to run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCronRun: async (task: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'task' is not null or undefined
            assertParamExists('adminCronRun', 'task', task)
            const localVarPath = `/admin/cron/{task}`
                .replace(`{${"task"}}`, encodeURIComponent(String(task)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unadopted files
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUnadoptedRepository: async (owner: string, repo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('adminDeleteUnadoptedRepository', 'owner', owner)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('adminDeleteUnadoptedRepository', 'repo', repo)
            const localVarPath = `/admin/unadopted/{owner}/{repo}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} username username of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUser: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('adminDeleteUser', 'username', username)
            const localVarPath = `/admin/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user\'s public key
         * @param {string} username username of user
         * @param {number} id id of the key to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUserPublicKey: async (username: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('adminDeleteUserPublicKey', 'username', username)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminDeleteUserPublicKey', 'id', id)
            const localVarPath = `/admin/users/{username}/keys/{id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit an existing user
         * @param {string} username username of user to edit
         * @param {EditUserOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEditUser: async (username: string, body?: EditUserOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('adminEditUser', 'username', username)
            const localVarPath = `/admin/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all organizations
         * @param {string} [lang] If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllOrgs: async (lang?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all users
         * @param {string} [lang] If the user has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllUsers: async (lang?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List unadopted repositories
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {string} [pattern] pattern of repositories to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUnadoptedList: async (page?: number, limit?: number, pattern?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/unadopted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pattern !== undefined) {
                localVarQueryParameter['pattern'] = pattern;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adopt unadopted files as a repository
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAdoptRepository(owner: string, repo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminAdoptRepository(owner, repo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create an organization
         * @param {string} username username of the user that will own the created organization
         * @param {CreateOrgOption} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCreateOrg(username: string, organization: CreateOrgOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateOrg(username, organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a public key on behalf of a user
         * @param {string} username username of the user
         * @param {CreateKeyOption} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCreatePublicKey(username: string, key?: CreateKeyOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreatePublicKey(username, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a repository on behalf of a user
         * @param {string} username username of the user. This user will own the created repository
         * @param {CreateRepoOption} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCreateRepo(username: string, repository: CreateRepoOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateRepo(username, repository, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a user
         * @param {CreateUserOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCreateUser(body?: CreateUserOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List cron tasks
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCronList(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cron>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCronList(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Run cron task
         * @param {string} task task to run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCronRun(task: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCronRun(task, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete unadopted files
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteUnadoptedRepository(owner: string, repo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteUnadoptedRepository(owner, repo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} username username of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteUser(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteUser(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user\'s public key
         * @param {string} username username of user
         * @param {number} id id of the key to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteUserPublicKey(username: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteUserPublicKey(username, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit an existing user
         * @param {string} username username of user to edit
         * @param {EditUserOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminEditUser(username: string, body?: EditUserOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminEditUser(username, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all organizations
         * @param {string} [lang] If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAllOrgs(lang?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetAllOrgs(lang, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all users
         * @param {string} [lang] If the user has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAllUsers(lang?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetAllUsers(lang, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List unadopted repositories
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {string} [pattern] pattern of repositories to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUnadoptedList(page?: number, limit?: number, pattern?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUnadoptedList(page, limit, pattern, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Adopt unadopted files as a repository
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAdoptRepository(owner: string, repo: string, options?: any): AxiosPromise<void> {
            return localVarFp.adminAdoptRepository(owner, repo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an organization
         * @param {string} username username of the user that will own the created organization
         * @param {CreateOrgOption} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateOrg(username: string, organization: CreateOrgOption, options?: any): AxiosPromise<Organization> {
            return localVarFp.adminCreateOrg(username, organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a public key on behalf of a user
         * @param {string} username username of the user
         * @param {CreateKeyOption} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreatePublicKey(username: string, key?: CreateKeyOption, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.adminCreatePublicKey(username, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a repository on behalf of a user
         * @param {string} username username of the user. This user will own the created repository
         * @param {CreateRepoOption} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateRepo(username: string, repository: CreateRepoOption, options?: any): AxiosPromise<Repository> {
            return localVarFp.adminCreateRepo(username, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a user
         * @param {CreateUserOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateUser(body?: CreateUserOption, options?: any): AxiosPromise<User> {
            return localVarFp.adminCreateUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List cron tasks
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCronList(page?: number, limit?: number, options?: any): AxiosPromise<Array<Cron>> {
            return localVarFp.adminCronList(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Run cron task
         * @param {string} task task to run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCronRun(task: string, options?: any): AxiosPromise<void> {
            return localVarFp.adminCronRun(task, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete unadopted files
         * @param {string} owner owner of the repo
         * @param {string} repo name of the repo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUnadoptedRepository(owner: string, repo: string, options?: any): AxiosPromise<void> {
            return localVarFp.adminDeleteUnadoptedRepository(owner, repo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} username username of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUser(username: string, options?: any): AxiosPromise<void> {
            return localVarFp.adminDeleteUser(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user\'s public key
         * @param {string} username username of user
         * @param {number} id id of the key to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteUserPublicKey(username: string, id: number, options?: any): AxiosPromise<void> {
            return localVarFp.adminDeleteUserPublicKey(username, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit an existing user
         * @param {string} username username of user to edit
         * @param {EditUserOption} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEditUser(username: string, body?: EditUserOption, options?: any): AxiosPromise<User> {
            return localVarFp.adminEditUser(username, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all organizations
         * @param {string} [lang] If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllOrgs(lang?: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<Organization>> {
            return localVarFp.adminGetAllOrgs(lang, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all users
         * @param {string} [lang] If the user has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAllUsers(lang?: string, page?: number, limit?: number, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.adminGetAllUsers(lang, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List unadopted repositories
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results
         * @param {string} [pattern] pattern of repositories to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUnadoptedList(page?: number, limit?: number, pattern?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.adminUnadoptedList(page, limit, pattern, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminAdoptRepository operation in AdminApi.
 * @export
 * @interface AdminApiAdminAdoptRepositoryRequest
 */
export interface AdminApiAdminAdoptRepositoryRequest {
    /**
     * owner of the repo
     * @type {string}
     * @memberof AdminApiAdminAdoptRepository
     */
    readonly owner: string

    /**
     * name of the repo
     * @type {string}
     * @memberof AdminApiAdminAdoptRepository
     */
    readonly repo: string
}

/**
 * Request parameters for adminCreateOrg operation in AdminApi.
 * @export
 * @interface AdminApiAdminCreateOrgRequest
 */
export interface AdminApiAdminCreateOrgRequest {
    /**
     * username of the user that will own the created organization
     * @type {string}
     * @memberof AdminApiAdminCreateOrg
     */
    readonly username: string

    /**
     * 
     * @type {CreateOrgOption}
     * @memberof AdminApiAdminCreateOrg
     */
    readonly organization: CreateOrgOption
}

/**
 * Request parameters for adminCreatePublicKey operation in AdminApi.
 * @export
 * @interface AdminApiAdminCreatePublicKeyRequest
 */
export interface AdminApiAdminCreatePublicKeyRequest {
    /**
     * username of the user
     * @type {string}
     * @memberof AdminApiAdminCreatePublicKey
     */
    readonly username: string

    /**
     * 
     * @type {CreateKeyOption}
     * @memberof AdminApiAdminCreatePublicKey
     */
    readonly key?: CreateKeyOption
}

/**
 * Request parameters for adminCreateRepo operation in AdminApi.
 * @export
 * @interface AdminApiAdminCreateRepoRequest
 */
export interface AdminApiAdminCreateRepoRequest {
    /**
     * username of the user. This user will own the created repository
     * @type {string}
     * @memberof AdminApiAdminCreateRepo
     */
    readonly username: string

    /**
     * 
     * @type {CreateRepoOption}
     * @memberof AdminApiAdminCreateRepo
     */
    readonly repository: CreateRepoOption
}

/**
 * Request parameters for adminCreateUser operation in AdminApi.
 * @export
 * @interface AdminApiAdminCreateUserRequest
 */
export interface AdminApiAdminCreateUserRequest {
    /**
     * 
     * @type {CreateUserOption}
     * @memberof AdminApiAdminCreateUser
     */
    readonly body?: CreateUserOption
}

/**
 * Request parameters for adminCronList operation in AdminApi.
 * @export
 * @interface AdminApiAdminCronListRequest
 */
export interface AdminApiAdminCronListRequest {
    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof AdminApiAdminCronList
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof AdminApiAdminCronList
     */
    readonly limit?: number
}

/**
 * Request parameters for adminCronRun operation in AdminApi.
 * @export
 * @interface AdminApiAdminCronRunRequest
 */
export interface AdminApiAdminCronRunRequest {
    /**
     * task to run
     * @type {string}
     * @memberof AdminApiAdminCronRun
     */
    readonly task: string
}

/**
 * Request parameters for adminDeleteUnadoptedRepository operation in AdminApi.
 * @export
 * @interface AdminApiAdminDeleteUnadoptedRepositoryRequest
 */
export interface AdminApiAdminDeleteUnadoptedRepositoryRequest {
    /**
     * owner of the repo
     * @type {string}
     * @memberof AdminApiAdminDeleteUnadoptedRepository
     */
    readonly owner: string

    /**
     * name of the repo
     * @type {string}
     * @memberof AdminApiAdminDeleteUnadoptedRepository
     */
    readonly repo: string
}

/**
 * Request parameters for adminDeleteUser operation in AdminApi.
 * @export
 * @interface AdminApiAdminDeleteUserRequest
 */
export interface AdminApiAdminDeleteUserRequest {
    /**
     * username of user to delete
     * @type {string}
     * @memberof AdminApiAdminDeleteUser
     */
    readonly username: string
}

/**
 * Request parameters for adminDeleteUserPublicKey operation in AdminApi.
 * @export
 * @interface AdminApiAdminDeleteUserPublicKeyRequest
 */
export interface AdminApiAdminDeleteUserPublicKeyRequest {
    /**
     * username of user
     * @type {string}
     * @memberof AdminApiAdminDeleteUserPublicKey
     */
    readonly username: string

    /**
     * id of the key to delete
     * @type {number}
     * @memberof AdminApiAdminDeleteUserPublicKey
     */
    readonly id: number
}

/**
 * Request parameters for adminEditUser operation in AdminApi.
 * @export
 * @interface AdminApiAdminEditUserRequest
 */
export interface AdminApiAdminEditUserRequest {
    /**
     * username of user to edit
     * @type {string}
     * @memberof AdminApiAdminEditUser
     */
    readonly username: string

    /**
     * 
     * @type {EditUserOption}
     * @memberof AdminApiAdminEditUser
     */
    readonly body?: EditUserOption
}

/**
 * Request parameters for adminGetAllOrgs operation in AdminApi.
 * @export
 * @interface AdminApiAdminGetAllOrgsRequest
 */
export interface AdminApiAdminGetAllOrgsRequest {
    /**
     * If the org has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
     * @type {string}
     * @memberof AdminApiAdminGetAllOrgs
     */
    readonly lang?: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof AdminApiAdminGetAllOrgs
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof AdminApiAdminGetAllOrgs
     */
    readonly limit?: number
}

/**
 * Request parameters for adminGetAllUsers operation in AdminApi.
 * @export
 * @interface AdminApiAdminGetAllUsersRequest
 */
export interface AdminApiAdminGetAllUsersRequest {
    /**
     * If the user has one or more repos with the given language(s), the org will be in the results. Multiple lang\&#39;s are ORed.
     * @type {string}
     * @memberof AdminApiAdminGetAllUsers
     */
    readonly lang?: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof AdminApiAdminGetAllUsers
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof AdminApiAdminGetAllUsers
     */
    readonly limit?: number
}

/**
 * Request parameters for adminUnadoptedList operation in AdminApi.
 * @export
 * @interface AdminApiAdminUnadoptedListRequest
 */
export interface AdminApiAdminUnadoptedListRequest {
    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof AdminApiAdminUnadoptedList
     */
    readonly page?: number

    /**
     * page size of results
     * @type {number}
     * @memberof AdminApiAdminUnadoptedList
     */
    readonly limit?: number

    /**
     * pattern of repositories to search for
     * @type {string}
     * @memberof AdminApiAdminUnadoptedList
     */
    readonly pattern?: string
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Adopt unadopted files as a repository
     * @param {AdminApiAdminAdoptRepositoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminAdoptRepository(requestParameters: AdminApiAdminAdoptRepositoryRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminAdoptRepository(requestParameters.owner, requestParameters.repo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an organization
     * @param {AdminApiAdminCreateOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminCreateOrg(requestParameters: AdminApiAdminCreateOrgRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminCreateOrg(requestParameters.username, requestParameters.organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a public key on behalf of a user
     * @param {AdminApiAdminCreatePublicKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminCreatePublicKey(requestParameters: AdminApiAdminCreatePublicKeyRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminCreatePublicKey(requestParameters.username, requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a repository on behalf of a user
     * @param {AdminApiAdminCreateRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminCreateRepo(requestParameters: AdminApiAdminCreateRepoRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminCreateRepo(requestParameters.username, requestParameters.repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a user
     * @param {AdminApiAdminCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminCreateUser(requestParameters: AdminApiAdminCreateUserRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminCreateUser(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List cron tasks
     * @param {AdminApiAdminCronListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminCronList(requestParameters: AdminApiAdminCronListRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminCronList(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Run cron task
     * @param {AdminApiAdminCronRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminCronRun(requestParameters: AdminApiAdminCronRunRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminCronRun(requestParameters.task, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete unadopted files
     * @param {AdminApiAdminDeleteUnadoptedRepositoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminDeleteUnadoptedRepository(requestParameters: AdminApiAdminDeleteUnadoptedRepositoryRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminDeleteUnadoptedRepository(requestParameters.owner, requestParameters.repo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {AdminApiAdminDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminDeleteUser(requestParameters: AdminApiAdminDeleteUserRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminDeleteUser(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user\'s public key
     * @param {AdminApiAdminDeleteUserPublicKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminDeleteUserPublicKey(requestParameters: AdminApiAdminDeleteUserPublicKeyRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminDeleteUserPublicKey(requestParameters.username, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit an existing user
     * @param {AdminApiAdminEditUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminEditUser(requestParameters: AdminApiAdminEditUserRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminEditUser(requestParameters.username, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all organizations
     * @param {AdminApiAdminGetAllOrgsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminGetAllOrgs(requestParameters: AdminApiAdminGetAllOrgsRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminGetAllOrgs(requestParameters.lang, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all users
     * @param {AdminApiAdminGetAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminGetAllUsers(requestParameters: AdminApiAdminGetAllUsersRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminGetAllUsers(requestParameters.lang, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List unadopted repositories
     * @param {AdminApiAdminUnadoptedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminUnadoptedList(requestParameters: AdminApiAdminUnadoptedListRequest = {}, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminUnadoptedList(requestParameters.page, requestParameters.limit, requestParameters.pattern, options).then((request) => request(this.axios, this.basePath));
    }
}
