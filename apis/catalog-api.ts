/* tslint:disable */
/* eslint-disable */
/**
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * The version of the OpenAPI document: 1.17.4+dcs
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CatalogEntry } from '../models';
// @ts-ignore
import { CatalogSearchResults } from '../models';
/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Catalog entry
         * @param {string} owner name of the owner
         * @param {string} repo name of the repo
         * @param {string} tag release tag or default branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogGetEntry: async (owner: string, repo: string, tag: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('catalogGetEntry', 'owner', owner)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('catalogGetEntry', 'repo', repo)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('catalogGetEntry', 'tag', tag)
            const localVarPath = `/catalog/entry/{owner}/{repo}/{tag}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Catalog entry metadata (manifest.yaml in JSON format)
         * @param {string} owner name of the owner
         * @param {string} repo name of the repo
         * @param {string} tag release tag or default branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogGetMetadata: async (owner: string, repo: string, tag: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('catalogGetMetadata', 'owner', owner)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('catalogGetMetadata', 'repo', repo)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('catalogGetMetadata', 'tag', tag)
            const localVarPath = `/catalog/entry/{owner}/{repo}/{tag}/metadata`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Catalog search
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [owner] search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [repo] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSearch: async (q?: string, owner?: string, repo?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalog/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (checkingLevel !== undefined) {
                localVarQueryParameter['checkingLevel'] = checkingLevel;
            }

            if (book !== undefined) {
                localVarQueryParameter['book'] = book;
            }

            if (partialMatch !== undefined) {
                localVarQueryParameter['partialMatch'] = partialMatch;
            }

            if (includeHistory !== undefined) {
                localVarQueryParameter['includeHistory'] = includeHistory;
            }

            if (includeMetadata !== undefined) {
                localVarQueryParameter['includeMetadata'] = includeMetadata;
            }

            if (showIngredients !== undefined) {
                localVarQueryParameter['showIngredients'] = showIngredients;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Catalog search by owner
         * @param {string} owner owner of the returned entries
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [repo] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSearchOwner: async (owner: string, q?: string, repo?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('catalogSearchOwner', 'owner', owner)
            const localVarPath = `/catalog/search/{owner}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (checkingLevel !== undefined) {
                localVarQueryParameter['checkingLevel'] = checkingLevel;
            }

            if (book !== undefined) {
                localVarQueryParameter['book'] = book;
            }

            if (partialMatch !== undefined) {
                localVarQueryParameter['partialMatch'] = partialMatch;
            }

            if (includeHistory !== undefined) {
                localVarQueryParameter['includeHistory'] = includeHistory;
            }

            if (includeMetadata !== undefined) {
                localVarQueryParameter['includeMetadata'] = includeMetadata;
            }

            if (showIngredients !== undefined) {
                localVarQueryParameter['showIngredients'] = showIngredients;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Catalog search by repo
         * @param {string} owner owner of the returned entries
         * @param {string} repo name of the repo of the returned entries
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [owner2] search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [repo2] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSearchRepo: async (owner: string, repo: string, q?: string, owner2?: string, repo2?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('catalogSearchRepo', 'owner', owner)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('catalogSearchRepo', 'repo', repo)
            const localVarPath = `/catalog/search/{owner}/{repo}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            await setApiKeyToObject(localVarQueryParameter, "access_token", configuration)

            // authentication AuthorizationHeaderToken required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication SudoHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Sudo", configuration)

            // authentication SudoParam required
            await setApiKeyToObject(localVarQueryParameter, "sudo", configuration)

            // authentication TOTPHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-GITEA-OTP", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (owner2 !== undefined) {
                localVarQueryParameter['owner'] = owner2;
            }

            if (repo2 !== undefined) {
                localVarQueryParameter['repo'] = repo2;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (checkingLevel !== undefined) {
                localVarQueryParameter['checkingLevel'] = checkingLevel;
            }

            if (book !== undefined) {
                localVarQueryParameter['book'] = book;
            }

            if (partialMatch !== undefined) {
                localVarQueryParameter['partialMatch'] = partialMatch;
            }

            if (includeHistory !== undefined) {
                localVarQueryParameter['includeHistory'] = includeHistory;
            }

            if (includeMetadata !== undefined) {
                localVarQueryParameter['includeMetadata'] = includeMetadata;
            }

            if (showIngredients !== undefined) {
                localVarQueryParameter['showIngredients'] = showIngredients;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Catalog entry
         * @param {string} owner name of the owner
         * @param {string} repo name of the repo
         * @param {string} tag release tag or default branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogGetEntry(owner: string, repo: string, tag: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogGetEntry(owner, repo, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Catalog entry metadata (manifest.yaml in JSON format)
         * @param {string} owner name of the owner
         * @param {string} repo name of the repo
         * @param {string} tag release tag or default branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogGetMetadata(owner: string, repo: string, tag: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogGetMetadata(owner, repo, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Catalog search
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [owner] search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [repo] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogSearch(q?: string, owner?: string, repo?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogSearch(q, owner, repo, tag, lang, stage, subject, checkingLevel, book, partialMatch, includeHistory, includeMetadata, showIngredients, sort, order, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Catalog search by owner
         * @param {string} owner owner of the returned entries
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [repo] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogSearchOwner(owner: string, q?: string, repo?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogSearchOwner(owner, q, repo, tag, lang, stage, subject, checkingLevel, book, partialMatch, includeHistory, includeMetadata, showIngredients, sort, order, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Catalog search by repo
         * @param {string} owner owner of the returned entries
         * @param {string} repo name of the repo of the returned entries
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [owner2] search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [repo2] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogSearchRepo(owner: string, repo: string, q?: string, owner2?: string, repo2?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogSearchRepo(owner, repo, q, owner2, repo2, tag, lang, stage, subject, checkingLevel, book, partialMatch, includeHistory, includeMetadata, showIngredients, sort, order, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogApiFp(configuration)
    return {
        /**
         * 
         * @summary Catalog entry
         * @param {string} owner name of the owner
         * @param {string} repo name of the repo
         * @param {string} tag release tag or default branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogGetEntry(owner: string, repo: string, tag: string, options?: any): AxiosPromise<CatalogEntry> {
            return localVarFp.catalogGetEntry(owner, repo, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Catalog entry metadata (manifest.yaml in JSON format)
         * @param {string} owner name of the owner
         * @param {string} repo name of the repo
         * @param {string} tag release tag or default branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogGetMetadata(owner: string, repo: string, tag: string, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.catalogGetMetadata(owner, repo, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Catalog search
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [owner] search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [repo] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSearch(q?: string, owner?: string, repo?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options?: any): AxiosPromise<CatalogSearchResults> {
            return localVarFp.catalogSearch(q, owner, repo, tag, lang, stage, subject, checkingLevel, book, partialMatch, includeHistory, includeMetadata, showIngredients, sort, order, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Catalog search by owner
         * @param {string} owner owner of the returned entries
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [repo] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSearchOwner(owner: string, q?: string, repo?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options?: any): AxiosPromise<CatalogSearchResults> {
            return localVarFp.catalogSearchOwner(owner, q, repo, tag, lang, stage, subject, checkingLevel, book, partialMatch, includeHistory, includeMetadata, showIngredients, sort, order, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Catalog search by repo
         * @param {string} owner owner of the returned entries
         * @param {string} repo name of the repo of the returned entries
         * @param {string} [q] keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
         * @param {string} [owner2] search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [repo2] search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [tag] search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {string} [lang] search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [stage] specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
         * @param {string} [subject] search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
         * @param {string} [checkingLevel] search only for entries with the given checking level(s). Can be 1, 2 or 3
         * @param {string} [book] search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
         * @param {boolean} [partialMatch] if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
         * @param {boolean} [includeHistory] if true, all releases, not just the latest, are included. Default is false
         * @param {boolean} [includeMetadata] if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
         * @param {boolean} [showIngredients] if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
         * @param {string} [sort] sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
         * @param {string} [order] sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
         * @param {number} [page] page number of results to return (1-based)
         * @param {number} [limit] page size of results, defaults to no limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogSearchRepo(owner: string, repo: string, q?: string, owner2?: string, repo2?: string, tag?: string, lang?: string, stage?: string, subject?: string, checkingLevel?: string, book?: string, partialMatch?: boolean, includeHistory?: boolean, includeMetadata?: boolean, showIngredients?: boolean, sort?: string, order?: string, page?: number, limit?: number, options?: any): AxiosPromise<CatalogSearchResults> {
            return localVarFp.catalogSearchRepo(owner, repo, q, owner2, repo2, tag, lang, stage, subject, checkingLevel, book, partialMatch, includeHistory, includeMetadata, showIngredients, sort, order, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for catalogGetEntry operation in CatalogApi.
 * @export
 * @interface CatalogApiCatalogGetEntryRequest
 */
export interface CatalogApiCatalogGetEntryRequest {
    /**
     * name of the owner
     * @type {string}
     * @memberof CatalogApiCatalogGetEntry
     */
    readonly owner: string

    /**
     * name of the repo
     * @type {string}
     * @memberof CatalogApiCatalogGetEntry
     */
    readonly repo: string

    /**
     * release tag or default branch
     * @type {string}
     * @memberof CatalogApiCatalogGetEntry
     */
    readonly tag: string
}

/**
 * Request parameters for catalogGetMetadata operation in CatalogApi.
 * @export
 * @interface CatalogApiCatalogGetMetadataRequest
 */
export interface CatalogApiCatalogGetMetadataRequest {
    /**
     * name of the owner
     * @type {string}
     * @memberof CatalogApiCatalogGetMetadata
     */
    readonly owner: string

    /**
     * name of the repo
     * @type {string}
     * @memberof CatalogApiCatalogGetMetadata
     */
    readonly repo: string

    /**
     * release tag or default branch
     * @type {string}
     * @memberof CatalogApiCatalogGetMetadata
     */
    readonly tag: string
}

/**
 * Request parameters for catalogSearch operation in CatalogApi.
 * @export
 * @interface CatalogApiCatalogSearchRequest
 */
export interface CatalogApiCatalogSearchRequest {
    /**
     * keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly q?: string

    /**
     * search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly owner?: string

    /**
     * search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly repo?: string

    /**
     * search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly tag?: string

    /**
     * search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly lang?: string

    /**
     * specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly stage?: string

    /**
     * search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly subject?: string

    /**
     * search only for entries with the given checking level(s). Can be 1, 2 or 3
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly checkingLevel?: string

    /**
     * search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly book?: string

    /**
     * if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearch
     */
    readonly partialMatch?: boolean

    /**
     * if true, all releases, not just the latest, are included. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearch
     */
    readonly includeHistory?: boolean

    /**
     * if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
     * @type {boolean}
     * @memberof CatalogApiCatalogSearch
     */
    readonly includeMetadata?: boolean

    /**
     * if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearch
     */
    readonly showIngredients?: boolean

    /**
     * sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly sort?: string

    /**
     * sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
     * @type {string}
     * @memberof CatalogApiCatalogSearch
     */
    readonly order?: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof CatalogApiCatalogSearch
     */
    readonly page?: number

    /**
     * page size of results, defaults to no limit
     * @type {number}
     * @memberof CatalogApiCatalogSearch
     */
    readonly limit?: number
}

/**
 * Request parameters for catalogSearchOwner operation in CatalogApi.
 * @export
 * @interface CatalogApiCatalogSearchOwnerRequest
 */
export interface CatalogApiCatalogSearchOwnerRequest {
    /**
     * owner of the returned entries
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly owner: string

    /**
     * keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly q?: string

    /**
     * search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly repo?: string

    /**
     * search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly tag?: string

    /**
     * search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly lang?: string

    /**
     * specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly stage?: string

    /**
     * search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly subject?: string

    /**
     * search only for entries with the given checking level(s). Can be 1, 2 or 3
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly checkingLevel?: string

    /**
     * search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly book?: string

    /**
     * if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly partialMatch?: boolean

    /**
     * if true, all releases, not just the latest, are included. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly includeHistory?: boolean

    /**
     * if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly includeMetadata?: boolean

    /**
     * if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly showIngredients?: boolean

    /**
     * sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly sort?: string

    /**
     * sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
     * @type {string}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly order?: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly page?: number

    /**
     * page size of results, defaults to no limit
     * @type {number}
     * @memberof CatalogApiCatalogSearchOwner
     */
    readonly limit?: number
}

/**
 * Request parameters for catalogSearchRepo operation in CatalogApi.
 * @export
 * @interface CatalogApiCatalogSearchRepoRequest
 */
export interface CatalogApiCatalogSearchRepoRequest {
    /**
     * owner of the returned entries
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly owner: string

    /**
     * name of the repo of the returned entries
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly repo: string

    /**
     * keyword(s). Can use multiple &#x60;q&#x3D;&lt;keyword&gt;&#x60;s or a comma-delimited string for more than one keyword. Is case insensitive
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly q?: string

    /**
     * search only for entries with the given owner name(s). Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly owner2?: string

    /**
     * search only for entries with the given repo name(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly repo2?: string

    /**
     * search only for entries with the given release tag(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly tag?: string

    /**
     * search only for entries with the given language(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly lang?: string

    /**
     * specifies which release stage to be return of these stages: \&quot;prod\&quot; - return only the production releases (default); \&quot;preprod\&quot; - return the pre-production release if it exists instead of the production release; \&quot;draft\&quot; - return the draft release if it exists instead of pre-production or production release; \&quot;latest\&quot; -return the default branch (e.g. master) if it is a valid RC instead of the above
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly stage?: string

    /**
     * search only for entries with the given subject(s). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive) unlesss partialMatch&#x3D;true
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly subject?: string

    /**
     * search only for entries with the given checking level(s). Can be 1, 2 or 3
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly checkingLevel?: string

    /**
     * search only for entries with the given book(s) (project ids). To match multiple, give the parameter multiple times or give a list comma delimited. Will perform an exact match (case insensitive)
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly book?: string

    /**
     * if true, subject, owner and repo search fields will use partial match (LIKE) when querying the catalog. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly partialMatch?: boolean

    /**
     * if true, all releases, not just the latest, are included. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly includeHistory?: boolean

    /**
     * if false, only subject and title are searched with query terms, if true all metadata values are searched. Default is true
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly includeMetadata?: boolean

    /**
     * if true, a list of the projects in the resource and their file paths will be listed for each entry. Default is false
     * @type {boolean}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly showIngredients?: boolean

    /**
     * sort repos alphanumerically by attribute. Supported values are \&quot;subject\&quot;, \&quot;title\&quot;, \&quot;reponame\&quot;, \&quot;tag\&quot;, \&quot;released\&quot;, \&quot;lang\&quot;, \&quot;releases\&quot;, \&quot;stars\&quot;, \&quot;forks\&quot;. Default is by \&quot;language\&quot;, \&quot;subject\&quot; and then \&quot;tag\&quot;
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly sort?: string

    /**
     * sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified.
     * @type {string}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly order?: string

    /**
     * page number of results to return (1-based)
     * @type {number}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly page?: number

    /**
     * page size of results, defaults to no limit
     * @type {number}
     * @memberof CatalogApiCatalogSearchRepo
     */
    readonly limit?: number
}

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * 
     * @summary Catalog entry
     * @param {CatalogApiCatalogGetEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogGetEntry(requestParameters: CatalogApiCatalogGetEntryRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogGetEntry(requestParameters.owner, requestParameters.repo, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Catalog entry metadata (manifest.yaml in JSON format)
     * @param {CatalogApiCatalogGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogGetMetadata(requestParameters: CatalogApiCatalogGetMetadataRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogGetMetadata(requestParameters.owner, requestParameters.repo, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Catalog search
     * @param {CatalogApiCatalogSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogSearch(requestParameters: CatalogApiCatalogSearchRequest = {}, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogSearch(requestParameters.q, requestParameters.owner, requestParameters.repo, requestParameters.tag, requestParameters.lang, requestParameters.stage, requestParameters.subject, requestParameters.checkingLevel, requestParameters.book, requestParameters.partialMatch, requestParameters.includeHistory, requestParameters.includeMetadata, requestParameters.showIngredients, requestParameters.sort, requestParameters.order, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Catalog search by owner
     * @param {CatalogApiCatalogSearchOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogSearchOwner(requestParameters: CatalogApiCatalogSearchOwnerRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogSearchOwner(requestParameters.owner, requestParameters.q, requestParameters.repo, requestParameters.tag, requestParameters.lang, requestParameters.stage, requestParameters.subject, requestParameters.checkingLevel, requestParameters.book, requestParameters.partialMatch, requestParameters.includeHistory, requestParameters.includeMetadata, requestParameters.showIngredients, requestParameters.sort, requestParameters.order, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Catalog search by repo
     * @param {CatalogApiCatalogSearchRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogSearchRepo(requestParameters: CatalogApiCatalogSearchRepoRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogSearchRepo(requestParameters.owner, requestParameters.repo, requestParameters.q, requestParameters.owner2, requestParameters.repo2, requestParameters.tag, requestParameters.lang, requestParameters.stage, requestParameters.subject, requestParameters.checkingLevel, requestParameters.book, requestParameters.partialMatch, requestParameters.includeHistory, requestParameters.includeMetadata, requestParameters.showIngredients, requestParameters.sort, requestParameters.order, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
